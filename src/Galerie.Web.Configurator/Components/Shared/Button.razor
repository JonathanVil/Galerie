@switch (Type)
{
    case ButtonType.Link:
        <a href="@Href" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 @Class">@ChildContent</a>
        break;
    case ButtonType.Submit:
        <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 @Class">@ChildContent</button>
        break;
    default:
        <button onclick="@OnClick" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800 @Class">@ChildContent</button>
        break;
}

@code {
    private ButtonType? _type;

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    
    [Parameter]
    public string? Href { get; set; }
    
    [Parameter]
    public EventCallback? OnClick { get; set; }

    [Parameter]
    public ButtonType Type
    {
        get => _type ?? (OnClick != null ? ButtonType.Button : Href != null ? ButtonType.Link : ButtonType.Submit);
        set => _type = value;
    }
    
    [Parameter]
    public string? Class { get; set; }

    public enum ButtonType
    {
        Button,
        Link,
        Submit
    }

}